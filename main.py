import math
import redis
import telebot
from telebot import types
import time
import datetime
import re
import json
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
REDIS_URL = os.environ['REDIS_URL']
TELE_TOKEN = os.environ['TELEGRAM_TOKEN']

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEPOSIT_LIMIT = -300  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
ADMIN_LIST = [665812965]  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–ø–µ—Ü –∫–æ–º–∞–Ω–¥ (—Ç—É—Ç —Ç–æ–ª—å–∫–æ –û–ª–∏–Ω)
ABOUT_LIMIT = 100  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
SEARCH_LIVE_TIME = 300  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
IMPRESSION_COST = 1  # –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
CONTENT_TYPES = ["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact",
                 "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
                 "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                 "migrate_from_chat_id", "pinned_message"]


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def app():
    # redis_url = 'redis://:@localhost:6379'  # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    redis_url = REDIS_URL
    bot = telebot.TeleBot(TELE_TOKEN)

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    drivers = {'about': redis.from_url(redis_url, db=1),
               'radius': redis.from_url(redis_url, db=2),
               'price': redis.from_url(redis_url, db=3),
               'wait': redis.from_url(redis_url, db=4),
               'status': redis.from_url(redis_url, db=5),
               'geo_long': redis.from_url(redis_url, db=6),
               'geo_lat': redis.from_url(redis_url, db=7),
               'impressions': redis.from_url(redis_url, db=8),
               'last_impression': redis.from_url(redis_url, db=9),
               'deposit': redis.from_url(redis_url, db=10),
               'name': redis.from_url(redis_url, db=11),
               'username': redis.from_url(redis_url, db=12)}

    # –†–µ–µ—Å—Ç—Ä –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    clients_search = redis.from_url(redis_url, db=15)

    menu_items = ['üëç –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã', 'üöï –Ø –≤–æ–¥–∏—Ç–µ–ª—å']
    menu_car_items = ['–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å', '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ –∫–º', '–í—ã—Ö–æ–¥', '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
                      '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',  "‚ú≥Ô∏è –ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ ‚ú≥Ô∏è"]
    menu_stop = "‚õîÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫ ‚õîÔ∏è"

    # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É –ø–æ–ª—é
    def get_avg(field: str):
        tot = 0
        count = 0
        for k in drivers[field].keys():
            tot += int(drivers[field][k])
            count += 1
        if count == 0:
            return 0
        return int(tot / count)

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    def go_start(message):
        username = message.chat.id
        menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        menu_keyboard.row(types.KeyboardButton(text=menu_items[0], request_location=True),
                          types.KeyboardButton(text=menu_items[1]))
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ "–≤ –ø–æ–∏—Å–∫–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞" –∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        if username in drivers['status'] and int(drivers['status'][username]) >= 0:
            drivers['status'][username] = -1
        if username in drivers['wait'] and int(drivers['wait'][username]) >= 0:
            drivers['wait'][username] = -1
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–≤—Å–µ–≥–æ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö), –∞ —Ç–∞–∫–∂–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –ø–æ–∏—Å–∫–µ
        total = 0
        active = 0
        for dr in drivers['status'].keys():
            total += 1
            if int(drivers['status'][dr]) == 1:
                active += 1
        clients_count = 0
        for _ in clients_search.keys():
            clients_count += 1
        menu_message = f"–í–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–Ω–æ: {total}\n–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ: {active}\n" \
                       f"–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –ø–æ–∏—Å–∫–µ: {clients_count}\n–ö–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ https://t.me/BelbekTaxi\n" \
                       f"üëç –î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—à–∏–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã‚Äù" \
                       f" (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º)," \
                       f" –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏, –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–∏–µ—Ö–∞—Ç—å –∑–∞ –≤–∞–º–∏. "
        bot.send_message(message.chat.id, menu_message, reply_markup=menu_keyboard, disable_web_page_preview=True)

    # –ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    def go_about(message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—è "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        drivers['wait'][username] = 0
        bot.send_message(message.chat.id, f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –º–∞—à–∏–Ω–µ (–Ω–µ –±–æ–ª—å—à–µ {ABOUT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤),"
                                          f" –Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Äú–ò–ª—å–¥–∞—Ä. –°–∏–Ω—è—è –•–æ–Ω–¥–∞. –í–æ–∂—É –±—ã—Å—Ç—Ä–æ, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.‚Äù",
                         reply_markup=keyboard)
        return

    # –ó–∞–ø—Ä–æ—Å —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
    def go_radius(message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–¥–∏—É—Å–∞ (—á–∏—Å–ª–æ–≤–æ–≥–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ –ø–æ–∑–∂–µ)
        drivers['wait'][username] = 1
        avg_km = get_avg('radius')
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞–π—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–µ—Ö–∞—Ç—å –∑–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º."
                                          f"\n–°—Ä–µ–¥–Ω–µ–µ —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {avg_km}", reply_markup=keyboard)
        return

    # –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω—ã –∑–∞ –∫–º
    def go_price(message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ü–µ–Ω—ã(—á–∏—Å–ª–æ–≤–æ–≥–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ –ø–æ–∑–∂–µ)
        drivers['wait'][username] = 2
        avg_price = get_avg('price')
        bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –æ–±—ã—á–Ω–æ –≤—ã –±–µ—Ä—ë—Ç–µ –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä –ø—É—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)."
                                          f"\n–°—Ä–µ–¥–Ω–µ–µ —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {avg_price}", reply_markup=keyboard)
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
    def get_profile(username):
        info_about = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in drivers['about']:
            info_about = drivers['about'][username].decode("utf-8")
        info_radius = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in drivers['radius']:
            info_radius = f"{int(drivers['radius'][username])} –∫–º"
        info_price = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in drivers['price']:
            info_price = f"{int(drivers['price'][username])} —Ä—É–±/–∫–º"
        impressions = 0
        if username in drivers['impressions']:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –¥–Ω—è –∏ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
            dt_timestamp = int(datetime.datetime.combine(datetime.date.today(), datetime.time(0, 0, 0)).timestamp())
            if int(drivers['last_impression'][username]) < dt_timestamp:
                drivers['impressions'][username] = 0
                current_time = int(time.time())
                drivers['last_impression'][username] = current_time
            impressions = int(drivers['impressions'][username])
        balance = 0
        if username in drivers['deposit']:
            balance = int(drivers['deposit'][username])

        info = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {info_about}\n–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {info_price}\n–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: {info_radius}\n" \
               f"–ü–æ–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {impressions}\n–ë–∞–ª–∞–Ω—Å: {balance}"
        return info

    # –ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
    def go_menu_car(message):
        username = message.chat.id
        menu_car = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        menu_car.row(types.KeyboardButton(text=menu_car_items[0]),
                     types.KeyboardButton(text=menu_car_items[1]))
        menu_car.row(types.KeyboardButton(text=menu_car_items[2]),
                     types.KeyboardButton(text=menu_car_items[3]))
        menu_car_text = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n" + get_profile(username)\
                        + f"\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞: {IMPRESSION_COST} —Ä." \
                          f"\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: {DEPOSIT_LIMIT} —Ä." \
                          f"\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @whitejoe (–ø–æ–∫–∞ —Ç–∞–∫)"
        if message.chat.username is not None:
            drivers['username'][username] = message.chat.username

        # –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –ø–æ–ª—è ...
        if username in drivers['about'] and username in drivers['radius'] and username in drivers['price']:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
            if username not in drivers['deposit']:
                drivers['deposit'][username] = 0
            # –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–∏—Å–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
            drivers['status'][username] = 0

            # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            name = ""
            if message.chat.first_name is not None:
                name = name + message.chat.first_name
            if message.chat.last_name is not None:
                name = name + " " + message.chat.last_name
            drivers['name'][username] = name

        # –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É, —Ç–æ –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        if username in drivers['status'] and int(drivers['status'][username]) == 0:
            if message.chat.username is not None:
                if int(drivers['deposit'][username]) >= DEPOSIT_LIMIT:
                    menu_car.row(types.KeyboardButton(text=menu_car_items[6], request_location=True))
                    menu_car_text = menu_car_text + f"\n\nüöï –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–∞‚Äù " \
                                                    f"(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º)."
                else:   # –∏–ª–∏ ...
                    menu_car_text = menu_car_text + f"\n\nf–í–∞—à –±–∞–ª–∞–Ω—Å –∏—Å—á–µ—Ä–ø–∞–Ω, –ª–∏–º–∏—Ç {DEPOSIT_LIMIT}"
            else:  # –ø–æ–∫–∞–∂–µ–º ...
                menu_car_text = menu_car_text + f"\n\n–ó–∞–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Telegram," \
                                                f" —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤."
        else:  # —Ö—É–π
            menu_car_text = menu_car_text + "\n\n –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è, —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤!"
        bot.send_message(message.chat.id, menu_car_text, reply_markup=menu_car)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    def get_distance(long1, lat1, long2, lat2):

        # –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
        def hav(x):
            return (math.sin(x / 2)) ** 2

        # –†–∞–¥–∏—É—Å —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã (–ó–µ–º–ª—è) –≤ –∫–º, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.5%
        planet_radius = 6371
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
        long1_rad = math.pi * long1 / 180
        lat1_rad = math.pi * lat1 / 180
        long2_rad = math.pi * long2 / 180
        lat2_rad = math.pi * lat2 / 180
        # –ú–Ω–æ–≥–æ –≥–µ–æ–º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ—è—Å–Ω—è—Ç—å –Ω–µ –±—É–¥—É.
        res = 2 * planet_radius * math.asin(math.sqrt(hav(long2_rad - long1_rad) + math.cos(long1_rad) *
                                                      math.cos(long1_rad) * hav(lat2_rad - lat1_rad)))
        return res

    # –§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É –≤–æ–¥–∏—Ç–µ–ª—è
    def inc_impression(user_driver):
        current_time = int(time.time())
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –¥–∞—Ç –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ
        dt_timestamp = int(datetime.datetime.combine(datetime.date.today(), datetime.time(0, 0, 0)).timestamp())
        if user_driver not in drivers['last_impression'] or int(drivers['last_impression'][user_driver]) < dt_timestamp:
            drivers['impressions'][user_driver] = 0
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        drivers['impressions'][user_driver] = int(drivers['impressions'][user_driver]) + 1
        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
        drivers['deposit'][user_driver] = int(drivers['deposit'][user_driver]) - IMPRESSION_COST
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        drivers['last_impression'][user_driver] = current_time

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    def go_search(message, location):
        username = message.chat.id
        result_list = []
        search_list = []
        result_message = ''
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –Ω–µ–¥–∞–≤–Ω–æ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        if username in clients_search:
            search_list_str = clients_search[username].decode("utf-8")
            search_list = json.loads(search_list_str)
        active_drivers = 0
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        for user_driver_ne in drivers['status'].keys():
            user_driver = user_driver_ne.decode("utf-8")
            # –ù–∞–º –Ω–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—É–µ ("–≤ –ø–æ–∏—Å–∫–µ")
            if int(drivers['status'][user_driver]) == 1:
                active_drivers += 1
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–æ–¥–∏—Ç–µ–ª—è
                dist = get_distance(location['longitude'], location['latitude'],
                                    float(drivers['geo_long'][user_driver]), float(drivers['geo_lat'][user_driver]))
                # –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —Ä—è–¥–æ–º, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
                if dist < int(drivers['radius'][user_driver]):
                    result_list.append(user_driver)
                    result_message = result_message + f"üöï {drivers['about'][user_driver].decode('utf-8')}\n" \
                                                      f"üöñ: {dist:.2f} –∫–º\n" \
                                                      f"üí∞: {int(drivers['price'][user_driver])} —Ä—É–±/–∫–º\n" \
                                                      f"@{drivers['username'][user_driver].decode('utf-8')}\n\n"
                    # –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –Ω–µ–¥–∞–≤–Ω–µ–º –ø–æ–∏—Å–∫–µ, —Ç–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞–µ–º –µ–º—É —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    if user_driver not in search_list:
                        inc_impression(user_driver)
        str_json = json.dumps(result_list)
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        clients_search.setex(username, SEARCH_LIVE_TIME, str_json)
        s_count = len(result_list)
        m_text = f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π {s_count} –∏–∑ {active_drivers} –∞–∫—Ç–∏–≤–Ω—ã—Ö:\n\n{result_message}"
        if s_count > 0:
            m_text = m_text + "–ú–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –Ω–∏–º –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –ø–æ–µ–¥–∫–µ." \
                              " –ü—Ä–∏—è—Ç–Ω–æ–π –¥–æ—Ä–æ–≥–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏—Å—Ç–µ–≥–Ω—É—Ç—å —Ä–µ–º–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
        bot.send_message(message.chat.id, m_text)

    # –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–º –∏–ª–∏ –∏–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    def go_location(message, location):
        username = message.chat.id
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≥–æ –∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
        if username in drivers['status'] and int(drivers['status'][username]) >= 0:  # –í–æ–¥–∏—Ç–µ–ª—å
            if int(drivers['deposit'][username]) >= DEPOSIT_LIMIT and username in drivers['username']:
                # –°—Ç–∞–≤–ª—é –≤–æ–¥–∏—Ç–ª–µ—é —Å—Ç–∞—Ç—É—Å "–≤ –ø–æ–∏—Å–∫–µ"
                drivers['status'][username] = 1
                drivers['geo_long'][username] = location['longitude']
                drivers['geo_lat'][username] = location['latitude']
                search_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
                search_keyboard.row(types.KeyboardButton(text=menu_stop))
                bot.send_message(message.chat.id, f"–ò–¥–µ—Ç –ø–æ–∏—Å–∫. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Ä–∞–¥–∏—É—Å–µ –±–æ—Ç"
                                                  f" –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à–µ –æ—ä—è–≤–ª–µ–Ω–∏–µ. –ñ–¥–∏—Ç–µ, –≤–∞–º –Ω–∞–ø–∏—à—É—Ç.",
                                 reply_markup=search_keyboard)
        else:  # –ù–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–∞—Å—Å–∞–∂–∏—Ä
            go_search(message, location)

    # –°—Ç–∞—Ä–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    @bot.message_handler(commands=['start'])
    def start_message(message):
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        go_start(message)

    # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    @bot.message_handler(commands=['geo'])
    def geo_message(message):
        try:
            long1 = float(message.text.split(' ')[1])
            lat1 = float(message.text.split(' ')[2])
            long2 = float(message.text.split(' ')[3])
            lat2 = float(message.text.split(' ')[4])
            dist = get_distance(long1, lat1, long2, lat2)
            bot.send_message(message.chat.id, f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {dist} –∫–º")
        except Exception as e:
            bot.send_message(message.chat.id,
                             f"%USERNAME% –∫–∞–∫–±–µ –æ—à–∏–±—Å–æ {e}")

    # –í—ã–≤–æ–¥ –∞–¥–º–∏–Ω—É —Å–ø–∏—Å–∫–∞ –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º
    @bot.message_handler(commands=['list'])
    def list_message(message):
        if message.chat.id in ADMIN_LIST:
            me = "–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π (ID - –∏–º—è - –±–∞–ª–∞–Ω—Å):\n"
            for username in drivers['name'].keys():
                me = me + f"{username.decode('utf-8')} - {drivers['name'][username].decode('utf-8')}" \
                          f" - {drivers['deposit'][username]}\n"
            bot.send_message(message.chat.id, me)

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –∞–¥–º–∏–Ω–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π /deposit –ê–π–¥–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∞
    @bot.message_handler(commands=['deposit'])
    def deposit_message(message):
        if message.chat.id in ADMIN_LIST:
            try:
                username = message.text.split(' ')[1]
                dep = int(message.text.split(' ')[2])
                new_balance = dep + int(drivers['deposit'][username])
                drivers['deposit'][username] = new_balance
                bot.send_message(message.chat.id,
                                 f"–î–µ–ø–æ–∑–∏—Ç {drivers['name'][username].decode('utf-8')} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {dep}, "
                                 f"–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_balance}")
            except Exception as e:
                bot.send_message(message.chat.id,
                                 f"–ê–¥–º–∏–Ω, –∫–∞–∫–±–µ –æ—à–∏–±—Å–æ {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    @bot.message_handler(content_types=['text'])
    def message_text(message):
        username = message.chat.id
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if username in drivers['wait'] and int(drivers['wait'][username]) == 0:
            if len(message.text) <= ABOUT_LIMIT:
                drivers['about'][username] = message.text
                drivers['wait'][username] = -1
                go_menu_car(message)
                return
            else:
                bot.send_message(message.chat.id, f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {ABOUT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤")
                return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é —Ä–∞–¥–∏—É—Å
        if username in drivers['wait'] and int(drivers['wait'][username]) == 1:
            if str(message.text).isnumeric():
                drivers['radius'][username] = int(message.text)
                drivers['wait'][username] = -1
                go_menu_car(message)
                return
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é —Ü–µ–Ω—É –∑–∞ –∫–º
        if username in drivers['wait'] and int(drivers['wait'][username]) == 2:
            if str(message.text).isnumeric():
                drivers['price'][username] = int(message.text)
                drivers['wait'][username] = -1
                go_menu_car(message)
                return
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –≤–æ–¥–∏—Ç–µ–ª—å"
        if message.text == menu_items[1]:
            go_menu_car(message)
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        if message.text == menu_car_items[0]:
            go_about(message)
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å"
        if message.text == menu_car_items[1]:
            go_radius(message)
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"
        if message.text == menu_car_items[2]:
            go_price(message)
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã—Ö–æ–¥"
        if message.text == menu_car_items[3]:
            drivers['status'][username] = -1
            go_start(message)
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
        if message.text == menu_stop and int(drivers['status'][username]) == 1:
            go_menu_car(message)
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–∫—Å—Ç–æ–º
        if re.fullmatch("^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", message.text):
            location = {'longitude': float(message.text.split(',')[0]), 'latitude': float(message.text.split(',')[1])}
            go_location(message, location)
            return
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–æ—à–µ–¥—à–∏—Ö –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    @bot.message_handler(content_types=['location'])
    def message_geo(message):
        location = {'longitude': message.location.longitude, 'latitude': message.location.latitude}
        go_location(message, location)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π  –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–¥—à–∏—Ö –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–µ
    @bot.message_handler(content_types=CONTENT_TYPES)
    def message_any(message):
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    bot.polling()


if __name__ == "__main__":
    app()
