import math
import redis
import telebot
from telebot import types
import time
import datetime
import re
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
REDIS_URL = os.environ['REDIS_URL']
TELE_TOKEN = os.environ['TELEGRAM_TOKEN']
SYMBOL = "‚ÇΩ"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_LIST = [665812965]  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–ø–µ—Ü –∫–æ–º–∞–Ω–¥ (—Ç—É—Ç —Ç–æ–ª—å–∫–æ –û–ª–∏–Ω)
ABOUT_LIMIT = 100  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
CONTENT_TYPES = ["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact",
                 "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
                 "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                 "migrate_from_chat_id", "pinned_message"]


# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
def get_distance(lat1, long1, lat2, long2):
    # –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    def hav(x):
        return (math.sin(x / 2)) ** 2

    # –†–∞–¥–∏—É—Å —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã –≤ –∫–º, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.5%
    planet_radius = 6371
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    long1_rad = math.pi * long1 / 180
    lat1_rad = math.pi * lat1 / 180
    long2_rad = math.pi * long2 / 180
    lat2_rad = math.pi * lat2 / 180
    # –ú–Ω–æ–≥–æ –≥–µ–æ–º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –ø–æ—è—Å–Ω—è—Ç—å –Ω–µ –±—É–¥—É.
    res = 2 * planet_radius * math.asin(math.sqrt(hav(long2_rad - long1_rad) + math.cos(long1_rad) *
                                                  math.cos(long1_rad) * hav(lat2_rad - lat1_rad)))
    return res


class Taxi:
    def __init__(self):
        redis_url = REDIS_URL
        # redis_url = 'redis://:@localhost:6379'  # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        self.drivers = {'about': redis.from_url(redis_url, db=1),
                        'radius': redis.from_url(redis_url, db=2),
                        'price': redis.from_url(redis_url, db=3),
                        'wait': redis.from_url(redis_url, db=4),
                        'status': redis.from_url(redis_url, db=5),
                        'geo_long': redis.from_url(redis_url, db=6),
                        'geo_lat': redis.from_url(redis_url, db=7),
                        'impressions': redis.from_url(redis_url, db=8),
                        'last_impression': redis.from_url(redis_url, db=9),
                        'views': redis.from_url(redis_url, db=10),
                        'name': redis.from_url(redis_url, db=11),
                        'username': redis.from_url(redis_url, db=12)}

        self.menu_items = ['üëç –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã', 'üöñ –Ø –≤–æ–¥–∏—Ç–µ–ª—å']
        self.menu_car_items = ['–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å', '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ –∫–º', '–í—ã—Ö–æ–¥',
                               '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
                               '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', "üöñ –ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"]
        self.menu_stop = "‚õîÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫ ‚õîÔ∏è"
        self.menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        self.menu_keyboard.row(types.KeyboardButton(text=self.menu_items[0], request_location=True),
                               types.KeyboardButton(text=self.menu_items[1]))

    # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É –ø–æ–ª—é
    def get_avg(self, field: str):
        tot = 0
        count = 0
        for k in self.drivers[field].keys():
            tot += int(self.drivers[field][k])
            count += 1
        if count == 0:
            return 0
        return int(tot / count)

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    def go_start(self, bot, message):
        username = message.chat.id

        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ "–≤ –ø–æ–∏—Å–∫–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞" –∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        self.drivers['status'][username] = -1
        self.drivers['wait'][username] = -1
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–≤—Å–µ–≥–æ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö), –∞ —Ç–∞–∫–∂–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –ø–æ–∏—Å–∫–µ
        total = 0
        active = 0

        for dr in self.drivers['status'].keys():
            total += 1
            if int(self.drivers['status'][dr]) == 1:
                active += 1
        menu_message = f"–í–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total}\n–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ: {active}\n" \
                       f"–ö–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏: https://t.me/BelbekTaxi\n\n" \
                       f"–ù–∞–∂–º–∏—Ç–µ ‚Äú{self.menu_items[0]}‚Äù" \
                       f" (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞)" \
                       f" –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é." \
                       f" –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –≤–æ–∑–ª–µ –í–∞—Å."
        bot.send_message(message.chat.id, menu_message, reply_markup=self.menu_keyboard, disable_web_page_preview=True)

    # –ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    def go_about(self, bot, message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—è "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        self.drivers['wait'][username] = 0
        bot.send_message(message.chat.id, f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –º–∞—à–∏–Ω–µ (–Ω–µ –±–æ–ª—å—à–µ {ABOUT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤),"
                                          f" –Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Äú–ò–ª—å–¥–∞—Ä. –°–∏–Ω—è—è –•–æ–Ω–¥–∞. –í–æ–∂—É –±—ã—Å—Ç—Ä–æ, –Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.‚Äù"
                                          f" –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                         reply_markup=keyboard)
        return

    # –ó–∞–ø—Ä–æ—Å —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
    def go_radius(self, bot, message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–¥–∏—É—Å–∞ (—á–∏—Å–ª–æ–≤–æ–≥–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ –ø–æ–∑–∂–µ)
        self.drivers['wait'][username] = 1
        avg_km = self.get_avg('radius')
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞–π—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–µ—Ö–∞—Ç—å –∑–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º."
                                          f"\n–°—Ä–µ–¥–Ω–µ–µ —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {avg_km}. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                         reply_markup=keyboard)
        return

    # –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω—ã –∑–∞ –∫–º
    def go_price(self, bot, message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ü–µ–Ω—ã(—á–∏—Å–ª–æ–≤–æ–≥–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ –ø–æ–∑–∂–µ)
        self.drivers['wait'][username] = 2
        avg_price = self.get_avg('price')
        bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ {SYMBOL} –æ–±—ã—á–Ω–æ –≤—ã –±–µ—Ä—ë—Ç–µ –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä –ø—É—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)."
                                          f"\n–°—Ä–µ–¥–Ω–µ–µ —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {avg_price}. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                         reply_markup=keyboard)
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
    def get_profile(self, username):
        info_about = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in self.drivers['about']:
            info_about = self.drivers['about'][username].decode("utf-8")
        info_radius = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in self.drivers['radius']:
            info_radius = f"{int(self.drivers['radius'][username])} –∫–º"
        info_price = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in self.drivers['price']:
            info_price = f"{int(self.drivers['price'][username])} {SYMBOL}/–∫–º"
        impressions = 0
        if username in self.drivers['impressions']:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –¥–Ω—è –∏ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞
            dt_timestamp = int(datetime.datetime.combine(datetime.date.today(), datetime.time(0, 0, 0)).timestamp())
            if int(self.drivers['last_impression'][username]) < dt_timestamp:
                self.drivers['impressions'][username] = 0
                current_time = int(time.time())
                self.drivers['last_impression'][username] = current_time
            impressions = int(self.drivers['impressions'][username])
        balance = 0
        if username in self.drivers['views']:
            balance = int(self.drivers['views'][username])

        info = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {info_about}\n–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {info_price}\n–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: {info_radius}\n" \
               f"–ü–æ–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {impressions}" \
               f"\n–ü–æ–∫–∞–∑–æ–≤ –≤—Å–µ–≥–æ: {balance}"
        return info

    # –ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
    def go_menu_car(self, bot, message):
        username = message.chat.id
        menu_car = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        # menu_car.add(self.menu_car_items[i] for i in range(4))
        menu_car.row(types.KeyboardButton(text=self.menu_car_items[0]),
                     types.KeyboardButton(text=self.menu_car_items[1]))
        menu_car.row(types.KeyboardButton(text=self.menu_car_items[2]),
                     types.KeyboardButton(text=self.menu_car_items[3]))
        menu_car_text = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n" + self.get_profile(username)
        if message.chat.username is not None:
            self.drivers['username'][username] = message.chat.username

        # –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –ø–æ–ª—è ...
        if username not in self.drivers['about']:
            self.go_about(bot, message)
            return

        if username not in self.drivers['radius']:
            self.go_radius(bot, message)
            return

        if username not in self.drivers['price']:
            self.go_price(bot, message)
            return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
        if username not in self.drivers['views']:
            self.drivers['views'][username] = 0
            # –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–∏—Å–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
        self.drivers['status'][username] = 0

        # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        name = ""
        if message.chat.first_name is not None:
            name = name + message.chat.first_name
        if message.chat.last_name is not None:
            name = name + " " + message.chat.last_name
        self.drivers['name'][username] = name

        # –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É, —Ç–æ –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞

        if message.chat.username is not None:
            menu_car.row(types.KeyboardButton(text=self.menu_car_items[6], request_location=True))
            menu_car_text = menu_car_text + f"\n\n–ù–∞–∂–º–∏—Ç–µ ‚Äú{self.menu_car_items[6]}‚Äù" \
                                            f" (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞)" \
                                            f" –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º."
        else:
            menu_car_text = menu_car_text + f"\n\n‚ÄºÔ∏è –ó–∞–¥–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ Telegram," \
                                            f" —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ ‚ÄºÔ∏è"

        bot.send_message(message.chat.id, menu_car_text, reply_markup=menu_car)

    # –§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É –≤–æ–¥–∏—Ç–µ–ª—è
    def inc_impression(self, user_driver):
        current_time = int(time.time())
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –¥–∞—Ç –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ
        dt_timestamp = int(datetime.datetime.combine(datetime.date.today(), datetime.time(0, 0, 0)).timestamp())
        if user_driver not in self.drivers['last_impression'] or int(
                self.drivers['last_impression'][user_driver]) < dt_timestamp:
            self.drivers['impressions'][user_driver] = 0
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω—è
        self.drivers['impressions'][user_driver] = int(self.drivers['impressions'][user_driver]) + 1
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—â–∏–π
        self.drivers['views'][user_driver] = int(self.drivers['views'][user_driver]) + 1
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.drivers['last_impression'][user_driver] = current_time

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    def go_search(self, location):
        result_message = ''

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        geo = {}
        for user_driver_ne in self.drivers['status'].keys():
            user_driver = int(user_driver_ne)
            # –ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—É–µ ("–≤ –ø–æ–∏—Å–∫–µ")
            if int(self.drivers['status'][user_driver]) == 1:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–æ–¥–∏—Ç–µ–ª—è
                dist = get_distance(location['latitude'], location['longitude'],
                                    float(self.drivers['geo_lat'][user_driver]),
                                    float(self.drivers['geo_long'][user_driver])
                                    )
                # –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —Ä—è–¥–æ–º, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
                if dist < int(self.drivers['radius'][user_driver]):
                    geo[user_driver] = dist

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º
        sorted_list = sorted(geo, key=geo.get)
        for user_driver in sorted_list:
            dist = geo[user_driver]
            result_message = result_message + f"üöñ {self.drivers['about'][user_driver].decode('utf-8')}\n" \
                                              f"üöï {dist:.2f} –∫–º\n" \
                                              f"üí∞ {int(self.drivers['price'][user_driver])} {SYMBOL}/–∫–º\n" \
                                              f"üí¨ @{self.drivers['username'][user_driver].decode('utf-8')}\n\n"
            # –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –Ω–µ–¥–∞–≤–Ω–µ–º –ø–æ–∏—Å–∫–µ, —Ç–æ –Ω–∞–∫—Ä—É—á–∏–≤–∞–µ–º –µ–º—É —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self.inc_impression(user_driver)

        s_count = len(sorted_list)
        m_text = "ü§∑‚Äç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –†—è–¥–æ–º —Å –í–∞–º–∏ –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–≤–µ–∑—Ç–∏ –≤–∞—Å, –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ."
        if s_count > 0:
            m_text = f"–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {s_count}\n\n{result_message}" \
                     f"üí¨ –ú–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –Ω–∏–º –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ." \
                     " –ü—Ä–∏—è—Ç–Ω–æ–π –¥–æ—Ä–æ–≥–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏—Å—Ç–µ–≥–Ω—É—Ç—å —Ä–µ–º–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
        return m_text

    # –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–º –∏–ª–∏ –∏–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    def go_location(self, bot, message, location):
        username = message.chat.id
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≥–æ –∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
        if username in self.drivers['status'] and int(self.drivers['status'][username]) >= 0:  # –í–æ–¥–∏—Ç–µ–ª—å
            if username in self.drivers['username']:
                # –°—Ç–∞–≤–ª—é –≤–æ–¥–∏—Ç–ª–µ—é —Å—Ç–∞—Ç—É—Å "–≤ –ø–æ–∏—Å–∫–µ"
                self.drivers['status'][username] = 1
                self.drivers['geo_long'][username] = location['longitude']
                self.drivers['geo_lat'][username] = location['latitude']
                search_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
                search_keyboard.row(types.KeyboardButton(text=self.menu_stop))
                bot.send_message(message.chat.id, f"‚è≥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Ä–∞–¥–∏—É—Å–µ –±–æ—Ç"
                                                  f" –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à–µ –æ—ä—è–≤–ª–µ–Ω–∏–µ. –ñ–¥–∏—Ç–µ, –≤–∞–º –Ω–∞–ø–∏—à—É—Ç.",
                                 reply_markup=search_keyboard)
        else:  # –ù–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –ø–∞—Å—Å–∞–∂–∏—Ä
            m_text = self.go_search(location)
            bot.send_message(message.chat.id, m_text, reply_markup=self.menu_keyboard)

    def deploy(self):
        bot = telebot.TeleBot(TELE_TOKEN)


        #  try:
        #      bot.polling()
        #  except Exception as e:
        #
        #     print("Error ", e)

        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        @bot.message_handler(commands=['start'])
        def start_message(message):
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            self.go_start(bot, message)

        # –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞
        @bot.message_handler(commands=['cancel'])
        def cancel_message(message):
            self.go_start(bot, message)

        # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        @bot.message_handler(commands=['geo'])
        def geo_message(message):
            try:
                lat1 = float(message.text.split(' ')[1])
                long1 = float(message.text.split(' ')[2])
                lat2 = float(message.text.split(' ')[3])
                long2 = float(message.text.split(' ')[4])

                dist = get_distance(lat1, long1, lat2, long2)
                bot.send_message(message.chat.id, f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {dist} –∫–º")
            except Exception as error:
                bot.send_message(message.chat.id, f"%USERNAME% –∫–∞–∫–±–µ –æ—à–∏–±—Å–æ {error}")

        # –í—ã–≤–æ–¥ –∞–¥–º–∏–Ω—É —Å–ø–∏—Å–∫–∞ –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º
        @bot.message_handler(commands=['list'])
        def list_message(message):
            if message.chat.id in ADMIN_LIST:
                me = "–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π (ID - –∏–º—è - –ø—Ä–æ—Å–º–æ—Ç—Ä—ã):\n"
                for username in self.drivers['name'].keys():
                    me = me + f"{username.decode('utf-8')} - {self.drivers['name'][username].decode('utf-8')}" \
                              f" - {int(self.drivers['views'][username])}\n"
                bot.send_message(message.chat.id, me)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        @bot.message_handler(content_types=['text'])
        def message_text(message):
            username = message.chat.id
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            if username in self.drivers['wait'] and int(self.drivers['wait'][username]) == 0:
                if len(message.text) <= ABOUT_LIMIT:
                    self.drivers['about'][username] = message.text
                    self.drivers['wait'][username] = -1
                    self.go_menu_car(bot, message)
                    return
                else:
                    bot.send_message(message.chat.id, f"‚ÄºÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ,"
                                                      f" –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {ABOUT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤ ‚ÄºÔ∏è")
                    return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é —Ä–∞–¥–∏—É—Å
            if username in self.drivers['wait'] and int(self.drivers['wait'][username]) == 1:
                if str(message.text).isnumeric():
                    self.drivers['radius'][username] = int(message.text)
                    self.drivers['wait'][username] = -1
                    self.go_menu_car(bot, message)
                    return
                else:
                    bot.send_message(message.chat.id, "‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚ÄºÔ∏è")
                    return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è, –∑–∞–ø–æ–ª–Ω—è—é —Ü–µ–Ω—É –∑–∞ –∫–º
            if username in self.drivers['wait'] and int(self.drivers['wait'][username]) == 2:
                if str(message.text).isnumeric():
                    self.drivers['price'][username] = int(message.text)
                    self.drivers['wait'][username] = -1
                    self.go_menu_car(bot, message)
                    return
                else:
                    bot.send_message(message.chat.id, "‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚ÄºÔ∏è")
                    return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –≤–æ–¥–∏—Ç–µ–ª—å"
            if message.text == self.menu_items[1]:
                self.go_menu_car(bot, message)
                return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            if message.text == self.menu_car_items[0]:
                self.go_about(bot, message)
                return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å"
            if message.text == self.menu_car_items[1]:
                self.go_radius(bot, message)
                return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"
            if message.text == self.menu_car_items[2]:
                self.go_price(bot, message)
                return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã—Ö–æ–¥"
            if message.text == self.menu_car_items[3]:
                self.drivers['status'][username] = -1
                self.go_start(bot, message)
                return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
            if message.text == self.menu_stop and int(self.drivers['status'][username]) == 1:
                self.go_menu_car(bot, message)
                return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–∫—Å—Ç–æ–º
            if re.fullmatch("^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", message.text):
                location = {'latitude': float(message.text.split(',')[0]),
                            'longitude': float(message.text.split(',')[1])}
                self.go_location(bot, message, location)
                return
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–æ—à–µ–¥—à–∏—Ö –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        @bot.message_handler(content_types=['location'])
        def message_geo(message):
            location = {'longitude': message.location.longitude, 'latitude': message.location.latitude}
            self.go_location(bot, message, location)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π  –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–¥—à–∏—Ö –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–µ
        @bot.message_handler(content_types=CONTENT_TYPES)
        def message_any(message):
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        bot.polling()


if __name__ == "__main__":
    taxi = Taxi()
    taxi.deploy()
