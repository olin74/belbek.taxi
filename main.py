import math

import redis
import telebot
from telebot import types
import time
import re

# import json

REDIS_URL = 'redis://:SJqkqqj7NXTXcEWHM6khiao0@ckv40fbvl001j0ub9gbr0g8ry:6379'
TELEBOT_TOKEN = '2083207800:AAFZ1QgWt4mYRv2Aw3gI-i2fmjvvDjZoqH4'
DEPOSIT_LIMIT = -100
LIMIT_MESSAGE = '–£ –≤–∞—Å –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –ø–æ–∫–∞–∑–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @whitejoe –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞'
ADMIN_LIST = ['whitejoe']
ABOUT_LIMIT = 100

CONTENT_TYPES = ["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact",
                 "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
                 "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                 "migrate_from_chat_id", "pinned_message"]


def app():
    redis_url = 'redis://:@localhost:6379'
    # redis_url = REDIS_URL
    bot = telebot.TeleBot(TELEBOT_TOKEN)

    redis_data = redis.from_url(redis_url, db=0)
    drivers = {'about': redis.from_url(redis_url, db=1),
               'radius': redis.from_url(redis_url, db=2),
               'price': redis.from_url(redis_url, db=3),
               'wait': redis.from_url(redis_url, db=4),
               'status': redis.from_url(redis_url, db=5),
               'geo_long': redis.from_url(redis_url, db=6),
               'geo_lat': redis.from_url(redis_url, db=7),
               'impressions': redis.from_url(redis_url, db=8),
               'last_impression': redis.from_url(redis_url, db=9),
               'deposit': redis.from_url(redis_url, db=10)}

    clients = {}
    # redis_data = redis.Redis(host='localhost', port=6379, decode_responses=True)
    if 'count_drivers' not in redis_data:
        redis_data['count_drivers'] = 0
    count_drivers = redis_data['count_drivers']
    if 'count_start' not in redis_data:
        redis_data['count_start'] = 0
    count_start = redis_data['count_start']
    menu_items = ['üëç –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã', 'üöï –Ø –≤–æ–¥–∏—Ç–µ–ª—å']
    menu_car_items = ['–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å', '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ –∫–º', '–í—ã—Ö–æ–¥', "‚ú≥Ô∏è –ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ ‚ú≥Ô∏è"]
    menu_stop = "‚õîÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫ ‚õîÔ∏è"

    def get_avg(field: str):
        tot = 0
        count = 0
        for k in drivers[field].keys():
            tot += int(drivers[field][k])
            count += 1
        if count == 0:
            return 0
        return int(tot / count)

    def go_start(message):
        username = message.chat.username
        menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        menu_keyboard.row(types.KeyboardButton(text=menu_items[0], request_location=True),
                          types.KeyboardButton(text=menu_items[1]))
        menu_message = f"üëç –î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—à–∏–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã‚Äù (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º)," \
                       f" –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å " \
                       f"–≤–æ–¥–∏—Ç–µ–ª—è–º–∏, –≥–æ—Ç–æ–≤—ã–º–∏ –ø—Ä–∏–µ—Ö–∞—Ç—å –∑–∞ –≤–∞–º–∏. "
        if username in drivers['status'] and int(drivers['status'][username]) >= 0:
            drivers['status'][username] = -1
        if username in drivers['wait'] and int(drivers['wait'][username]) >= 0:
            drivers['wait'][username] = -1
        bot.send_message(message.chat.id, menu_message, reply_markup=menu_keyboard)

    def go_about(message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.username
        drivers['wait'][username] = 0
        bot.send_message(message.chat.id, f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –º–∞—à–∏–Ω–µ (–Ω–µ –±–æ–ª—å—à–µ {ABOUT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤),"
                                          f" –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–ª—å–¥–∞—Ä. –°–∏–Ω—è—è –•–æ–Ω–¥–∞. –í–æ–∂—É –±—ã—Å—Ç—Ä–æ, –Ω–æ –∞–∫–∫—É—Ä—Ç–Ω–æ.",
                         reply_markup=keyboard)
        return

    def go_radius(message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.username
        drivers['wait'][username] = 1
        avg_km = get_avg('radius')
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞–π—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–µ—Ö–∞—Ç—å –∑–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º."
                                          f"\n–°—Ä–µ–¥–Ω–µ–µ —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {avg_km}", reply_markup=keyboard)
        return

    def go_price(message):
        keyboard = types.ReplyKeyboardRemove()
        username = message.chat.username
        drivers['wait'][username] = 2
        avg_price = get_avg('price')
        bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –æ–±—ã—á–Ω–æ –≤—ã –±–µ—Ä—ë—Ç–µ –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä –ø—É—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)."
                                          f"\n–°—Ä–µ–¥–Ω–µ–µ —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {avg_price}", reply_markup=keyboard)
        return

    def get_profile(username):
        info_about = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in drivers['about']:
            info_about = drivers['about'][username].decode("utf-8")
        info_radius = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in drivers['radius']:
            info_radius = f"{int(drivers['radius'][username])} –∫–º"
        info_price = "–ü–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
        if username in drivers['price']:
            info_price = f"{int(drivers['price'][username])} —Ä—É–±/–∫–º"
        impressions = 0
        if username in drivers['impressions']:
            impressions = int(drivers['impressions'][username])
        balance = 0
        if username in drivers['deposit']:
            balance = int(drivers['deposit'][username])

        info = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {info_about}\n–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {info_price}\n–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: {info_radius}\n" \
               f"–ü–æ–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–≥–Ω—è: {impressions}\n–ë–∞–ª–∞–Ω—Å: {balance}"
        return info

    def go_menu_car(message):
        username = message.chat.username
        menu_car = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        menu_car.row(types.KeyboardButton(text=menu_car_items[0]),
                     types.KeyboardButton(text=menu_car_items[1]))
        menu_car.row(types.KeyboardButton(text=menu_car_items[2]),
                     types.KeyboardButton(text=menu_car_items[3]))
        if username in drivers['about'] and username in drivers['radius'] and username in drivers['price']:
            if username not in drivers['deposit']:
                drivers['deposit'][username] = 0
            drivers['status'][username] = 0
        menu_car_text = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n" + get_profile(username)
        if username in drivers['status'] and int(drivers['status'][username]) == 0:
            if int(drivers['deposit'][username]) >= DEPOSIT_LIMIT:
                menu_car.row(types.KeyboardButton(text=menu_car_items[4], request_location=True))
                menu_car_text = menu_car_text + f"\nüöï –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ ‚Äú–ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–∞‚Äù (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ" \
                                                f" —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º), –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Ä–∞–¥–∏—É—Å–∞ –±–æ—Ç –±—É–¥–µ—Ç" \
                                                f" –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à–µ –æ—ä—è–≤–ª–µ–Ω–∏–µ."
            else:
                menu_car_text = menu_car_text + f"\n\n –í–∞—à –±–∞–ª–∞–Ω—Å –∏—Å—á–µ—Ä–ø–∞–Ω, –ª–∏–º–∏—Ç {DEPOSIT_LIMIT}." \
                                                f" –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @whitejoe"
        else:
            menu_car_text = menu_car_text + "\n\n –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è, —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤!"
        bot.send_message(message.chat.id, menu_car_text, reply_markup=menu_car)

    def get_distance(long1, lat1, long2, lat2):
        def hav(x):
            return (math.sin(x/2)) ** 2
        planet_radius = 6371  # –†–∞–¥–∏—É—Å —Ç–µ–∫—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã (–ó–µ–º–ª—è) –≤ –ö–ú, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.5%
        long1_rad = math.pi * long1 / 180
        lat1_rad = math.pi * lat1 / 180
        long2_rad = math.pi * long2 / 180
        lat2_rad = math.pi * lat2 / 180
        return 2 * planet_radius * math.asin(math.sqrt(hav(long2_rad - long1_rad) +
                                                math.cos(long1_rad) * math.cos(long1_rad) * hav(lat2_rad - lat1_rad)))


    def go_search(message, location):



        curtime = int(time.time())
        bot.send_message(message.chat.id,
                         f"–¢—É—Ç –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –¥–æ–ø–∏—Å–∞–Ω–æ, –Ω–æ –ø–æ –∏–¥–µ–µ —è —É–∂–µ —Ç—É—Ç –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π")

    def go_location(message, location):
        username = message.chat.username
        if username in drivers['status'] and int(drivers['status'][username]) >= 0 and\
                int(drivers['deposit'][username]) >= DEPOSIT_LIMIT:
            drivers['status'][username] = 1
            drivers['geo_long'][username] = location['longitude']
            drivers['geo_lat'][username] = location['latitude']
            search_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
            search_keyboard.row(types.KeyboardButton(text=menu_stop))
            bot.send_message(message.chat.id, f"–ù—É, —Ç–µ–ø–µ—Ä—å –∫—É—Ä–∏ –±–∞–º–±—É–∫, –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –µ—â—ë –Ω–µ—Ç."
                                              f" –ù–æ, –µ—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å, –∑–Ω–∞—á–∏—Ç –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç",
                             reply_markup=search_keyboard)
        else:
            go_search(message, location)
            go_start(message)

    @bot.message_handler(commands=['start'])
    def start_message(message):
        redis_data['count_start'] = int(redis_data['count_start']) + 1
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        go_start(message)

    @bot.message_handler(commands=['geo'])
    def geo_message(message):
        try:

            long1 = float(message.text.split(' ')[1])
            lat1 = float(message.text.split(' ')[2])
            long2 = float(message.text.split(' ')[3])
            lat2 = float(message.text.split(' ')[4])
            dist = get_distance(long1, lat1, long2, lat2)
            bot.send_message(message.chat.id, f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {dist} –∫–º")
        except Exception as e:
            bot.send_message(message.chat.id,
                             f"%USERNAME% –∫–∞–∫–±–µ –æ—à–∏–±—Å–æ {e}")
    @bot.message_handler(commands=['deposit'])
    def deposit_message(message):
        if message.chat.username in ADMIN_LIST:
            try:
                username = message.text.split(' ')[1]
                dep = int(message.text.split(' ')[2])
                new_balance = dep + int(drivers['deposit'][username])
                drivers['deposit'][username] = new_balance
                bot.send_message(message.chat.id,
                                 f"–î–µ–ø–æ–∑–∏—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {dep}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_balance}")
            except:
                bot.send_message(message.chat.id,
                                 f"–ê–¥–º–∏–Ω, –∫–∞–∫–±–µ –æ—à–∏–±—Å–æ")

    @bot.message_handler(content_types=['text'])
    def message_text(message):
        username = message.chat.username
        if username in drivers['wait'] and int(drivers['wait'][username]) == 0:
            if len(message.text) <= ABOUT_LIMIT:
                drivers['about'][username] = message.text
                drivers['wait'][username] = -1
                go_menu_car(message)
                return
            else:
                bot.send_message(message.chat.id, f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {ABOUT_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤")
                return

        if username in drivers['wait'] and int(drivers['wait'][username]) == 1:
            if str(message.text).isnumeric():
                drivers['radius'][username] = int(message.text)
                drivers['wait'][username] = -1
                go_menu_car(message)
                return
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                return
        if username in drivers['wait'] and int(drivers['wait'][username]) == 2:
            if str(message.text).isnumeric():
                drivers['price'][username] = int(message.text)
                drivers['wait'][username] = -1
                go_menu_car(message)
                return
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                return
        if message.text == menu_items[1]:
            go_menu_car(message)
            return
        if message.text == menu_car_items[0]:
            go_about(message)
            return
        if message.text == menu_car_items[1]:
            go_radius(message)
            return
        if message.text == menu_car_items[2]:
            go_price(message)
            return
        if message.text == menu_car_items[3]:
            drivers['status'][username] = -1
            go_start(message)
            return
        if message.text == menu_stop and int(drivers['status'][username]) == 1:
            go_menu_car(message)
            return

        if re.fullmatch("^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$", message.text):
            location = {'longitude': float(message.text.split(',')[0]), 'latitude': float(message.text.split(',')[1])}
            go_location(message, location)
            return
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    @bot.message_handler(content_types=['location'])
    def message_geo(message):
        location = {'longitude': message.location.longitude, 'latitude': message.location.latitude}
        go_location(message, location)

    @bot.message_handler(content_types=CONTENT_TYPES)
    def message_any(message):
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.polling()


if __name__ == "__main__":
    app()
